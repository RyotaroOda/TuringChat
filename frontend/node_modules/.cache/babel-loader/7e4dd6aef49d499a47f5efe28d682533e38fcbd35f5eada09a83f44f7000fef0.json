{"ast":null,"code":"import { io } from \"socket.io-client\";\n\n// サーバーとの接続を作成\nconst socket = io(\"http://localhost:3000\", {\n  transports: [\"websocket\"],\n  // WebSocketを明示的に使用\n  reconnectionAttempts: 5,\n  // 再接続を試みる回数を設定\n  timeout: 10000 // タイムアウト設定\n});\nconsole.log(\"try to Connect to server\");\n\n// サーバーとの接続状態をログに出力\nsocket.on(\"connect\", () => {\n  console.log(\"Connected to server\");\n});\nsocket.on(\"disconnect\", () => {\n  console.log(\"Disconnected from server\");\n});\n\n// メッセージを送信\nexport const sendMessage = (roomId, message) => {\n  socket.emit(\"sendMessage\", {\n    roomId,\n    message\n  });\n  console.log(\"Sent socket message:\", message);\n};\n\n// サーバーからメッセージを受け取るリスナー\nexport const onMessageReceived = callback => {\n  socket.on(\"receiveMessage\", callback);\n  console.log(\"Listening for messages...\");\n};\n\n//マッチングリクエストを送信\nexport const requestMatch = () => {\n  socket.emit(\"requestMatch\");\n};\n\n//プレイヤー名を設定\nexport const savePlayerName = playerName => {\n  socket.emit(\"savePlayerName\", playerName);\n};\n\n//マッチング成功時の処理\nexport const onMatchFound = callback => {\n  socket.on(\"matchFound\", callback);\n};\n\n// ターン更新リスナー\nexport const onTurnUpdate = callback => {\n  socket.on(\"activePlayerUpdate\", callback);\n};\n\n// メッセージ数更新リスナー\nexport const onTurnCountUpdate = callback => {\n  socket.on(\"turnCountUpdate\", callback);\n};\n\n// バトル終了リスナー\nexport const onBattleEnd = callback => {\n  socket.on(\"battleEnd\", callback);\n};\nexport default socket;","map":{"version":3,"names":["io","socket","transports","reconnectionAttempts","timeout","console","log","on","sendMessage","roomId","message","emit","onMessageReceived","callback","requestMatch","savePlayerName","playerName","onMatchFound","onTurnUpdate","onTurnCountUpdate","onBattleEnd"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/TuringChat-D4/frontend/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from \"socket.io-client\";\n\n// サーバーとの接続を作成\nconst socket: Socket = io(\"http://localhost:3000\", {\n  transports: [\"websocket\"], // WebSocketを明示的に使用\n  reconnectionAttempts: 5, // 再接続を試みる回数を設定\n  timeout: 10000, // タイムアウト設定\n});\nconsole.log(\"try to Connect to server\");\n\n// サーバーとの接続状態をログに出力\nsocket.on(\"connect\", () => {\n  console.log(\"Connected to server\");\n});\n\nsocket.on(\"disconnect\", () => {\n  console.log(\"Disconnected from server\");\n});\n\n// メッセージを送信\nexport const sendMessage = (roomId: string, message: string) => {\n  socket.emit(\"sendMessage\", { roomId, message });\n  console.log(\"Sent socket message:\", message);\n};\n\n// サーバーからメッセージを受け取るリスナー\nexport const onMessageReceived = (\n  callback: (data: { senderId: string; message: string }) => void,\n) => {\n  socket.on(\"receiveMessage\", callback);\n  console.log(\"Listening for messages...\");\n};\n\n//マッチングリクエストを送信\nexport const requestMatch = () => {\n  socket.emit(\"requestMatch\");\n};\n\n//プレイヤー名を設定\nexport const savePlayerName = (playerName: string) => {\n  socket.emit(\"savePlayerName\", playerName);\n};\n\n//マッチング成功時の処理\nexport const onMatchFound = (\n  callback: (data: {\n    roomId: string;\n    opponentId: string;\n    opponentName: string;\n    battleConfig: any;\n  }) => void,\n) => {\n  socket.on(\"matchFound\", callback);\n};\n\n// ターン更新リスナー\nexport const onTurnUpdate = (callback: (data: { roomData: any }) => void) => {\n  socket.on(\"activePlayerUpdate\", callback);\n};\n\n// メッセージ数更新リスナー\nexport const onTurnCountUpdate = (\n  callback: (data: { messageCount: number }) => void,\n) => {\n  socket.on(\"turnCountUpdate\", callback);\n};\n\n// バトル終了リスナー\nexport const onBattleEnd = (callback: (data: { roomId: string }) => void) => {\n  socket.on(\"battleEnd\", callback);\n};\n\nexport default socket;\n"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;;AAE7C;AACA,MAAMC,MAAc,GAAGD,EAAE,CAAC,uBAAuB,EAAE;EACjDE,UAAU,EAAE,CAAC,WAAW,CAAC;EAAE;EAC3BC,oBAAoB,EAAE,CAAC;EAAE;EACzBC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;AACFC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;AAEvC;AACAL,MAAM,CAACM,EAAE,CAAC,SAAS,EAAE,MAAM;EACzBF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACpC,CAAC,CAAC;AAEFL,MAAM,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;EAC5BF,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;AACzC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,WAAW,GAAGA,CAACC,MAAc,EAAEC,OAAe,KAAK;EAC9DT,MAAM,CAACU,IAAI,CAAC,aAAa,EAAE;IAAEF,MAAM;IAAEC;EAAQ,CAAC,CAAC;EAC/CL,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEI,OAAO,CAAC;AAC9C,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAC5BC,QAA+D,IAC5D;EACHZ,MAAM,CAACM,EAAE,CAAC,gBAAgB,EAAEM,QAAQ,CAAC;EACrCR,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAA,KAAM;EAChCb,MAAM,CAACU,IAAI,CAAC,cAAc,CAAC;AAC7B,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAIC,UAAkB,IAAK;EACpDf,MAAM,CAACU,IAAI,CAAC,gBAAgB,EAAEK,UAAU,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GACvBJ,QAKU,IACP;EACHZ,MAAM,CAACM,EAAE,CAAC,YAAY,EAAEM,QAAQ,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAIL,QAA2C,IAAK;EAC3EZ,MAAM,CAACM,EAAE,CAAC,oBAAoB,EAAEM,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMM,iBAAiB,GAC5BN,QAAkD,IAC/C;EACHZ,MAAM,CAACM,EAAE,CAAC,iBAAiB,EAAEM,QAAQ,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAMO,WAAW,GAAIP,QAA4C,IAAK;EAC3EZ,MAAM,CAACM,EAAE,CAAC,WAAW,EAAEM,QAAQ,CAAC;AAClC,CAAC;AAED,eAAeZ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}