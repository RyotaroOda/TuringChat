{"ast":null,"code":"var _jsxFileName = \"/Users/ryotarooda/Desktop/\\u5352\\u8AD6/TuringChats/TuringChat-D4/frontend/src/views/BattleView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport socket, { sendMessage } from \"../services/socket.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BattleView = () => {\n  _s();\n  var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n  const [chatLog, setChatLog] = useState([]);\n  const location = useLocation();\n  const myName = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.myData.playerName) + \"(あなた)\" || \"error\";\n  const myId = socket.id || \"error\";\n  const opponentId = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.matchData.opponentId) || \"error\";\n  const opponentName = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.matchData.opponentName) || \"error\";\n  const {\n    roomId\n  } = useParams();\n  const [message, setMessage] = useState(\"\");\n  const [isMyTurn, setIsMyTurn] = useState(true); // 仮の状態\n  const [turnCount, setTurnCount] = useState(0);\n  const maxTurn = ((_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.matchData.battleConfig.maxTurn) || 10;\n  const oneTurnTime = ((_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.matchData.battleConfig.oneTurnTime) || 60; // in seconds\n  const [remainingTime, setRemainingTime] = useState(oneTurnTime);\n\n  // プレイヤーIDとネームの対応を保存\n  const playerNames = {\n    [opponentId]: opponentName,\n    [myId]: myName\n  };\n  useEffect(() => {\n    // メッセージ受信リスナーの登録\n    const messageHandler = data => {\n      // 送信者が相手プレイヤーだった場合のみチャットログを更新\n      if (data.senderId === opponentId) {\n        console.log(`Message received from opponent (${data.senderId}): ${data.message}`);\n        setChatLog(prevChatLog => [...prevChatLog, {\n          senderId: data.senderId,\n          message: data.message\n        } // メッセージをオブジェクトとして保存\n        ]);\n      }\n    };\n\n    // メッセージ受信リスナーを登録\n    socket.on(\"receiveMessage\", messageHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"receiveMessage\", messageHandler);\n    };\n  }, [opponentId]); // opponentId を依存関係に追加\n\n  useEffect(() => {\n    // ターン更新リスナー\n    const turnHandler = data => {\n      // setIsMyTurn(data.activePlayer === socket.id); // 自分のターンかどうかをチェック\n      setTurnCount(data.currentTurn);\n    };\n    socket.on(\"turnUpdate\", turnHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"turnUpdate\", turnHandler);\n    };\n  }, []);\n  useEffect(() => {\n    // バトル終了リスナー\n    const battleEndHandler = () => {\n      alert(\"Battle Ended!\");\n    };\n    socket.on(\"battleEnd\", battleEndHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"battleEnd\", battleEndHandler);\n    };\n  }, []);\n  const handleSendMessage = () => {\n    if (message.trim() && isMyTurn) {\n      if (roomId) {\n        sendMessage(roomId, message);\n        setChatLog(prevChatLog => [...prevChatLog, {\n          senderId: myId,\n          message: message\n        } // メッセージをオブジェクトとして保存\n        ]); // 自分のメッセージをチャットログに追加\n        setMessage(\"\");\n      } else {\n        console.error(\"Room ID is undefined\");\n      }\n    }\n  };\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // Implement battle finish logic here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5BFE\\u6226\\u753B\\u9762\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u30EB\\u30FC\\u30E0ID: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: chatLog.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [playerNames[msg.senderId] || \"Unknown\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \", maxTurn - turnCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \", remainingTime, \"\\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \", isMyTurn ? \"あなた\" : \"相手\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u76F8\\u624B\\u306E\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u30CD\\u30FC\\u30E0: \", opponentName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !isMyTurn,\n        children: isMyTurn ? \"送信\" : \"Wait for your turn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/result\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFinishMatching,\n        children: \"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(BattleView, \"roP81nzOt6IpptpeTbW/UMyC3Yo=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = BattleView;\nexport default BattleView;\nvar _c;\n$RefreshReg$(_c, \"BattleView\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","socket","sendMessage","jsxDEV","_jsxDEV","BattleView","_s","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","chatLog","setChatLog","location","myName","state","myData","playerName","myId","id","opponentId","matchData","opponentName","roomId","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","maxTurn","battleConfig","oneTurnTime","remainingTime","setRemainingTime","playerNames","messageHandler","data","senderId","console","log","prevChatLog","on","off","turnHandler","currentTurn","battleEndHandler","alert","handleSendMessage","trim","error","handleFinishMatching","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","onClick","disabled","to","_c","$RefreshReg$"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/TuringChat-D4/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport socket, { sendMessage } from \"../services/socket.ts\";\n\ninterface MatchData {\n  myId: string;\n  opponentId: string;\n  opponentName: string;\n  battleConfig: {\n    maxTurn: number;\n    oneTurnTime: number;\n  };\n}\n\ninterface LocationState {\n  myData: {\n    playerName: string;\n  };\n  matchData: MatchData;\n}\n\nconst BattleView: React.FC = () => {\n  const [chatLog, setChatLog] = useState<\n    { senderId: string; message: string }[]\n  >([]);\n  const location = useLocation();\n  const myName = location.state?.myData.playerName + \"(あなた)\" || \"error\";\n  const myId = socket.id || \"error\";\n  const opponentId = location.state?.matchData.opponentId || \"error\";\n  const opponentName = location.state?.matchData.opponentName || \"error\";\n  const { roomId } = useParams<{ roomId: string }>();\n  const [message, setMessage] = useState<string>(\"\");\n  const [isMyTurn, setIsMyTurn] = useState<boolean>(true); // 仮の状態\n  const [turnCount, setTurnCount] = useState<number>(0);\n  const maxTurn = location.state?.matchData.battleConfig.maxTurn || 10;\n  const oneTurnTime = location.state?.matchData.battleConfig.oneTurnTime || 60; // in seconds\n  const [remainingTime, setRemainingTime] = useState<number>(oneTurnTime);\n\n  // プレイヤーIDとネームの対応を保存\n  const playerNames: { [key: string]: string } = {\n    [opponentId]: opponentName,\n    [myId as string]: myName,\n  };\n\n  useEffect(() => {\n    // メッセージ受信リスナーの登録\n    const messageHandler = (data: { senderId: string; message: string }) => {\n      // 送信者が相手プレイヤーだった場合のみチャットログを更新\n      if (data.senderId === opponentId) {\n        console.log(\n          `Message received from opponent (${data.senderId}): ${data.message}`,\n        );\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: data.senderId, message: data.message }, // メッセージをオブジェクトとして保存\n        ]);\n      }\n    };\n\n    // メッセージ受信リスナーを登録\n    socket.on(\"receiveMessage\", messageHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"receiveMessage\", messageHandler);\n    };\n  }, [opponentId]); // opponentId を依存関係に追加\n\n  useEffect(() => {\n    // ターン更新リスナー\n    const turnHandler = (data: any) => {\n      // setIsMyTurn(data.activePlayer === socket.id); // 自分のターンかどうかをチェック\n      setTurnCount(data.currentTurn);\n    };\n    socket.on(\"turnUpdate\", turnHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"turnUpdate\", turnHandler);\n    };\n  }, []);\n\n  useEffect(() => {\n    // バトル終了リスナー\n    const battleEndHandler = () => {\n      alert(\"Battle Ended!\");\n    };\n    socket.on(\"battleEnd\", battleEndHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"battleEnd\", battleEndHandler);\n    };\n  }, []);\n\n  const handleSendMessage = () => {\n    if (message.trim() && isMyTurn) {\n      if (roomId) {\n        sendMessage(roomId, message);\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: myId as string, message: message }, // メッセージをオブジェクトとして保存\n        ]); // 自分のメッセージをチャットログに追加\n        setMessage(\"\");\n      } else {\n        console.error(\"Room ID is undefined\");\n      }\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // Implement battle finish logic here\n  };\n\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              {/* IDからプレイヤーネームを判別して表示 */}\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong>{\" \"}\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手のプレイヤーネーム: {opponentName}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}