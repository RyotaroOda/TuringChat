{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Link,useLocation,useParams}from\"react-router-dom\";import socket,{sendMessage}from\"../services/socket\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BattleView=()=>{var _location$state,_location$state2,_location$state3,_location$state4,_location$state5;const[chatLog,setChatLog]=useState([]);const location=useLocation();const myName=((_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.myData.playerName)+\"(あなた)\"||\"error\";const myId=socket.id||\"error\";const opponentId=((_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.matchData.opponentId)||\"error\";const opponentName=((_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.matchData.opponentName)||\"error\";const{roomId}=useParams();const[message,setMessage]=useState(\"\");const[isMyTurn,setIsMyTurn]=useState(true);// 仮の状態\nconst[turnCount,setTurnCount]=useState(0);const maxTurn=((_location$state4=location.state)===null||_location$state4===void 0?void 0:_location$state4.matchData.battleConfig.maxTurn)||10;const oneTurnTime=((_location$state5=location.state)===null||_location$state5===void 0?void 0:_location$state5.matchData.battleConfig.oneTurnTime)||60;// in seconds\nconst[remainingTime,setRemainingTime]=useState(oneTurnTime);// プレイヤーIDとネームの対応を保存\nconst playerNames={[opponentId]:opponentName,[myId]:myName};useEffect(()=>{// メッセージ受信リスナーの登録\nconst messageHandler=data=>{// 送信者が相手プレイヤーだった場合のみチャットログを更新\nif(data.senderId===opponentId){console.log(`Message received from opponent (${data.senderId}): ${data.message}`);setChatLog(prevChatLog=>[...prevChatLog,{senderId:data.senderId,message:data.message}// メッセージをオブジェクトとして保存\n]);}};// メッセージ受信リスナーを登録\nsocket.on(\"receiveMessage\",messageHandler);// クリーンアップ関数でリスナーを解除\nreturn()=>{socket.off(\"receiveMessage\",messageHandler);};},[opponentId]);// opponentId を依存関係に追加\nuseEffect(()=>{// ターン更新リスナー\nconst turnHandler=data=>{// setIsMyTurn(data.activePlayer === socket.id); // 自分のターンかどうかをチェック\nsetTurnCount(data.currentTurn);};socket.on(\"turnUpdate\",turnHandler);// クリーンアップ関数でリスナーを解除\nreturn()=>{socket.off(\"turnUpdate\",turnHandler);};},[]);useEffect(()=>{// バトル終了リスナー\nconst battleEndHandler=()=>{alert(\"Battle Ended!\");};socket.on(\"battleEnd\",battleEndHandler);// クリーンアップ関数でリスナーを解除\nreturn()=>{socket.off(\"battleEnd\",battleEndHandler);};},[]);const handleSendMessage=()=>{if(message.trim()&&isMyTurn){if(roomId){sendMessage(roomId,message);setChatLog(prevChatLog=>[...prevChatLog,{senderId:myId,message:message}// メッセージをオブジェクトとして保存\n]);// 自分のメッセージをチャットログに追加\nsetMessage(\"\");}else{console.error(\"Room ID is undefined\");}}};const handleFinishMatching=()=>{console.log(\"Finishing battle...\");// Implement battle finish logic here\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5BFE\\u6226\\u753B\\u9762\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30EB\\u30FC\\u30E0ID: \",roomId]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"}),/*#__PURE__*/_jsx(\"ul\",{children:chatLog.map((msg,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[playerNames[msg.senderId]||\"Unknown\",\":\"]}),\" \",msg.message]},index))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \",maxTurn-turnCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \",remainingTime,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \",isMyTurn?\"あなた\":\"相手\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u76F8\\u624B\\u306E\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u30CD\\u30FC\\u30E0: \",opponentName]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:message,onChange:e=>setMessage(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,disabled:!isMyTurn,children:isMyTurn?\"送信\":\"Wait for your turn\"})]}),/*#__PURE__*/_jsx(Link,{to:\"/result\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleFinishMatching,children:\"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"})})]});};export default BattleView;","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","socket","sendMessage","jsx","_jsx","jsxs","_jsxs","BattleView","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","chatLog","setChatLog","location","myName","state","myData","playerName","myId","id","opponentId","matchData","opponentName","roomId","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","maxTurn","battleConfig","oneTurnTime","remainingTime","setRemainingTime","playerNames","messageHandler","data","senderId","console","log","prevChatLog","on","off","turnHandler","currentTurn","battleEndHandler","alert","handleSendMessage","trim","error","handleFinishMatching","children","map","msg","index","type","value","onChange","e","target","onClick","disabled","to"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/TuringChat-D4/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport socket, { sendMessage } from \"../services/socket\";\n\ninterface MatchData {\n  myId: string;\n  opponentId: string;\n  opponentName: string;\n  battleConfig: {\n    maxTurn: number;\n    oneTurnTime: number;\n  };\n}\n\ninterface LocationState {\n  myData: {\n    playerName: string;\n  };\n  matchData: MatchData;\n}\n\nconst BattleView: React.FC = () => {\n  const [chatLog, setChatLog] = useState<\n    { senderId: string; message: string }[]\n  >([]);\n  const location = useLocation();\n  const myName = location.state?.myData.playerName + \"(あなた)\" || \"error\";\n  const myId = socket.id || \"error\";\n  const opponentId = location.state?.matchData.opponentId || \"error\";\n  const opponentName = location.state?.matchData.opponentName || \"error\";\n  const { roomId } = useParams<{ roomId: string }>();\n  const [message, setMessage] = useState<string>(\"\");\n  const [isMyTurn, setIsMyTurn] = useState<boolean>(true); // 仮の状態\n  const [turnCount, setTurnCount] = useState<number>(0);\n  const maxTurn = location.state?.matchData.battleConfig.maxTurn || 10;\n  const oneTurnTime = location.state?.matchData.battleConfig.oneTurnTime || 60; // in seconds\n  const [remainingTime, setRemainingTime] = useState<number>(oneTurnTime);\n\n  // プレイヤーIDとネームの対応を保存\n  const playerNames: { [key: string]: string } = {\n    [opponentId]: opponentName,\n    [myId as string]: myName,\n  };\n\n  useEffect(() => {\n    // メッセージ受信リスナーの登録\n    const messageHandler = (data: { senderId: string; message: string }) => {\n      // 送信者が相手プレイヤーだった場合のみチャットログを更新\n      if (data.senderId === opponentId) {\n        console.log(\n          `Message received from opponent (${data.senderId}): ${data.message}`,\n        );\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: data.senderId, message: data.message }, // メッセージをオブジェクトとして保存\n        ]);\n      }\n    };\n\n    // メッセージ受信リスナーを登録\n    socket.on(\"receiveMessage\", messageHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"receiveMessage\", messageHandler);\n    };\n  }, [opponentId]); // opponentId を依存関係に追加\n\n  useEffect(() => {\n    // ターン更新リスナー\n    const turnHandler = (data: any) => {\n      // setIsMyTurn(data.activePlayer === socket.id); // 自分のターンかどうかをチェック\n      setTurnCount(data.currentTurn);\n    };\n    socket.on(\"turnUpdate\", turnHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"turnUpdate\", turnHandler);\n    };\n  }, []);\n\n  useEffect(() => {\n    // バトル終了リスナー\n    const battleEndHandler = () => {\n      alert(\"Battle Ended!\");\n    };\n    socket.on(\"battleEnd\", battleEndHandler);\n\n    // クリーンアップ関数でリスナーを解除\n    return () => {\n      socket.off(\"battleEnd\", battleEndHandler);\n    };\n  }, []);\n\n  const handleSendMessage = () => {\n    if (message.trim() && isMyTurn) {\n      if (roomId) {\n        sendMessage(roomId, message);\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: myId as string, message: message }, // メッセージをオブジェクトとして保存\n        ]); // 自分のメッセージをチャットログに追加\n        setMessage(\"\");\n      } else {\n        console.error(\"Room ID is undefined\");\n      }\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // Implement battle finish logic here\n  };\n\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              {/* IDからプレイヤーネームを判別して表示 */}\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong>{\" \"}\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手のプレイヤーネーム: {opponentName}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}